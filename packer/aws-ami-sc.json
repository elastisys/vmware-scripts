{
    "variables": {},
    "builders": [
      {
        "access_key": "{{user `aws_access_key`}}",
        "ami_name": "{{user `vm_name`}}-{{user `github_sha`}}",
        "instance_type": "t3.2xlarge",
        "region": "{{user `region`}}",
        "secret_key": "{{user `aws_secret_key`}}",

        "user_data_file": "{{user `user_data_file`}}",

        "ssh_username":         "{{ user `ssh_user` }}",
        "ssh_keypair_name":     "{{ user `ssh_keypair_name` }}",
        "ssh_private_key_file": "{{ user `ssh_private_key_file` }}",
        "ssh_timeout": "20m",
        "security_group_id": "{{ user `security_group_id` }}",
        "type": "amazon-ebs",
        "ami_regions": ["{{user `region`}}"],
        "source_ami_filter": {
            "filters": {
            "virtualization-type": "hvm",
            "name": "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*",
            "root-device-type": "ebs"
            },
            "owners": ["099720109477"],
            "most_recent": true
         },
        "tags": {
            "OS_Version": "Ubuntu-20.04",
            "Base_AMI_Name": "{{ .SourceAMIName }}"
        },
        "run_tags": {
            "Name": "Packer Builder {{user `vm_name`}}",
            "Team": "{{user `team_tag`}}",
            "Owner": "{{user `owner_tag`}}",
            "Scope": "#k8s-compliant-kubernetes",
            "Delete": "No"
        },
        "launch_block_device_mappings": [
          {
            "device_name": "/dev/sda1",
            "volume_type": "gp2",
            "volume_size": 200,
            "delete_on_termination": true
          }
        ]
      }
    ],
      "provisioners": [
        {
          "type":   "shell-local",
          "inline": ["cd {{ user `ck8s_config_path` }}", "./secrets-generator.sh", "export GNUPGHOME=\"$(mktemp -d)\"", "echo $GNUPGHOME > gnupghome.txt", "./pgp-generator.sh", "sops -i -e secrets.yaml", "sops -i -e sc-config/ssh/id_rsa"]
        },
        {
          "type": "shell",
          "inline": [ "sudo apt update", "sudo apt install -y python3-pip", "sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz" ]
        },
        {
          "type": "shell",
          "inline": [ "ec2metadata --local-ipv4 > /tmp/private_ip" ]
        },
        {
          "type": "shell",
          "inline": ["curl http://checkip.amazonaws.com -o /tmp/public_ip"]
        },
        {
          "type": "file",
          "direction": "download",
          "source": "/tmp/private_ip",
          "destination": "private_ip"
        },
        {
          "type": "file",
          "direction": "download",
          "source": "/tmp/public_ip",
          "destination": "public_ip"
        },
        {
          "type":                 "shell-local",
          "inline":               ["sed 's/\\./-/g' private_ip > private_ip_underscore", "PRIVATE_IP=$(cat private_ip_underscore)", "echo \"VM Private IP is: ${PRIVATE_IP} \"", "cd {{ user `ck8s_config_path` }}/sc-config", "sed 's/{PRIVATE_IP}/'\"${PRIVATE_IP}\"'/g' inventory.ini.template > inventory.ini"]
        },
        {
          "type":                 "shell-local",
          "inline":               ["PUBLIC_IP=$(cat public_ip)", "echo \"VM Public IP is: ${PUBLIC_IP} \"", "cd {{ user `ck8s_config_path` }}/sc-config", "sed -i 's/{PUBLIC_IP}/'\"${PUBLIC_IP}\"'/g' inventory.ini", "sed 's/{PUBLIC_IP}/'\"${PUBLIC_IP}\"'/g' group_vars/k8s-cluster/k8s-cluster.yml.template > group_vars/k8s-cluster/k8s-cluster.yml"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}"],
          "inline":               ["export GNUPGHOME=$(cat {{ user `ck8s_config_path` }}gnupghome.txt)", "echo \"CK8S_CONFIG_PATH=${CK8S_CONFIG_PATH}\"", "cd ../../compliantkubernetes-kubespray/", "git submodule init", "git submodule update", "cd kubespray", "git checkout v2.14.2", "cd ..", "./bin/ck8s-kubespray apply sc"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}"],
          "inline":               ["export GNUPGHOME=$(cat {{ user `ck8s_config_path` }}gnupghome.txt)", "PRIVATE_IP=$(cat private_ip)", "PUBLIC_IP=$(cat public_ip)", "cd {{ user `ck8s_config_path` }}", "sops -i -d .state/kube_config_sc.yaml", "sed -i 's/'172.17.0.100'/'\"${PUBLIC_IP}\"'/' .state/kube_config_sc.yaml", "sops -i -e .state/kube_config_sc.yaml"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}"],
          "inline":               ["export GNUPGHOME=$(cat {{ user `ck8s_config_path` }}gnupghome.txt)", "cd ../../compliantkubernetes-apps", "./bin/ck8s ops kubectl sc apply -f ../local-storage-pv-sc.yaml"]
        },
        {
          "type":                 "shell",
          "inline":               ["for i in $(seq 1 8); do sudo mkdir -p /mnt/disks/pv$i/prometheus-db; sudo chown -R 1000:1000 /mnt/disks/pv$i; done"]
        },
        {
          "type":                 "shell",
          "inline":               ["sudo kubectl patch storageclass local-storage -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}"],
          "inline":               ["export GNUPGHOME=$(cat {{ user `ck8s_config_path` }}gnupghome.txt)", "cd ../../compliantkubernetes-apps", "./bin/ck8s apply sc"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}"],
          "inline":               ["export GNUPGHOME=$(cat {{ user `ck8s_config_path` }}gnupghome.txt)", "cd ../../compliantkubernetes-apps", "./bin/ck8s ops kubectl sc apply -f ../node-port-service-cluster.yaml"]
        },
        {
          "type":                 "shell-local",
          "environment_vars":     ["CK8S_CONFIG_PATH={{ user `ck8s_config_path` }}"],
          "inline":               ["exit 1"]
        }
    ]
}
